
.. _program_listing_file_include_ros2_uav_px4_modes_rates_thrust_impl.hpp:

Program Listing for File rates_thrust_impl.hpp
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_modes_rates_thrust_impl.hpp>` (``include/ros2_uav_px4/modes/rates_thrust_impl.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 Damien SIX (damien@robotsix.net)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <memory>
   #include "ros2_uav_px4/utils/tf2_eigen.hpp"
   
   namespace ros2_uav::modes
   {
   using uav_ros2::utils::eigenNedToTf2Nwu;
   using uav_ros2::utils::tf2FwuToEigenNed;
   
   template<DerivedFromRatesThrustMode ModeT>
   RatesThrustMode<ModeT>::RatesThrustMode(
     const ModeBase::Settings & mode_settings,
     rclcpp::Node & node)
   : ModeInterface<ModeT>(mode_settings, node)
   {
     this->setSetpointUpdateRate(250.0);
     rates_setpoint_ = std::make_shared<px4_ros2::RatesSetpointType>(*this);
     this->addChildContainer(this->pipeline_.get());
     time_init_ = this->node_.now();
   }
   
   template<DerivedFromRatesThrustMode ModeT>
   void RatesThrustMode<ModeT>::updateSetpoint([[maybe_unused]] float dt)
   {
     this->odometryUpdate();
     auto elapsed_time = (this->node_.now()).nanoseconds();
     auto control_inputs = this->pipeline_->execute(std::chrono::nanoseconds(elapsed_time));
     const Eigen::Vector3f thrust_sp{0.0f, 0.0f, -static_cast<float>(control_inputs.thrust)};
     const Eigen::Vector3f rates_sp = tf2FwuToEigenNed(control_inputs.rates);
     rates_setpoint_->update(rates_sp, thrust_sp);
   }
   
   }  // namespace ros2_uav::modes
