
.. _program_listing_file_include_ros2_uav_px4_mode_interface_mode_interface.hpp:

Program Listing for File mode_interface.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_mode_interface_mode_interface.hpp>` (``include/ros2_uav_px4/mode_interface/mode_interface.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 Damien SIX (damien@robotsix.net)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <memory>
   #include <vector>
   #include <string>
   #include <uav_cpp/parameters/param_container.hpp>
   #include <px4_ros2/components/mode.hpp>
   #include <uav_cpp/components/mode.hpp>
   #include <ros2_uav_interfaces/msg/coordinate.hpp>
   
   namespace ros2_uav::modes
   {
   using uav_cpp::parameters::ParamContainer;
   using uav_cpp::utils::Coordinate;
   using px4_ros2::ModeBase;
   
   template<typename ModeT>
   concept DerivedFromUavCppMode = requires(ModeT mode)
   {
     [] < typename ... T > (uav_cpp::components::Mode<T...> &) {} (mode);
   };
   
   template<DerivedFromUavCppMode ModeT>
   class ModeInterface : public ModeBase, public ParamContainer
   {
   public:
     ModeInterface(const ModeBase::Settings & mode_settings, rclcpp::Node & node)
     : ModeBase(node, mode_settings),
       ParamContainer(),
       node_(node)
     {
       std::string node_namespace = node_.get_namespace();
       if (node_namespace.empty()) {
         node_namespace = "/";
       }
       // Remove the leading slash
       node_namespace = node_namespace.substr(1);
       mode_.setUavName(node_namespace);
   
       coordinate_publisher_ = node_.create_publisher<ros2_uav_interfaces::msg::Coordinate>(
         "debug/coordinates", 20);
     }
   
     void setSetpoint(const ModeT::InputType & setpoint) {mode_.setInput(setpoint);}
   
     void setTfBuffer(std::shared_ptr<tf2_ros::Buffer> tf_buffer) {mode_.setTfBuffer(tf_buffer);}
   
   protected:
     rclcpp::Node & node_;  
     ModeT mode_;  
   
     rclcpp::Publisher<ros2_uav_interfaces::msg::Coordinate>::SharedPtr coordinate_publisher_;
   };
   
   }  // namespace ros2_uav::modes
