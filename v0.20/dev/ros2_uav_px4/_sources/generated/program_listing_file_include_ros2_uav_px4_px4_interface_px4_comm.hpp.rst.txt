
.. _program_listing_file_include_ros2_uav_px4_px4_interface_px4_comm.hpp:

Program Listing for File px4_comm.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_px4_interface_px4_comm.hpp>` (``include/ros2_uav_px4/px4_interface/px4_comm.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 The Technology Innovation Institute (TII)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <memory>
   #include <mutex>
   #include <thread>
   
   #include <uav_cpp/types/timestamped_types.hpp>
   #include <uav_cpp/interfaces/fcu_interface.hpp>
   #include "ros2_uav_px4/px4_interface/px4_comm_base.hpp"
   
   namespace ros2_uav
   {
   using uav_cpp::types::AttitudeThrustStamped;
   using uav_cpp::types::RatesThrustStamped;
   
   class Px4Comm : public Px4CommBase
   {
   public:
     explicit Px4Comm(rclcpp::Node * node);
   
     ~Px4Comm();
   
     void setArm(bool arm);
     void setOffboard(bool offboard);
     void land();
     void takeoff();
     void landHome();
     void setAttitudeThrust(const AttitudeThrustStamped & setpoint);
     void setRatesThrust(const RatesThrustStamped & setpoint);
     void pingOffboard();
     bool isConnected() {return connected_;}
     int getTargetSystem() {return target_system_;}
     void setFcuInterface(std::shared_ptr<uav_cpp::fcu_interface::FcuInterface> fcu_interface)
     {
       fcu_interface_ = fcu_interface;
     }
   
   private:
     int target_system_; 
     bool connected_{false}; 
     std::shared_ptr<uav_cpp::fcu_interface::FcuInterface> fcu_interface_;
     int64_t last_status_received_{0};   
     std::mutex mtx_;                    
     std::unique_ptr<std::jthread> check_connection_thread_;
     void onVehicleControlMode(const px4_msgs::msg::VehicleControlMode::SharedPtr msg) override;
   
     void onVehicleOdometry(const px4_msgs::msg::VehicleOdometry::SharedPtr msg) override;
   
     void onVehicleStatus(const px4_msgs::msg::VehicleStatus::SharedPtr msg) override;
   
     int64_t Px4TimestampNow();
   
     void DefaultCommand(px4_msgs::msg::VehicleCommand & msg);
   
     void checkStatusReceived();
   };
   
   }  // namespace ros2_uav
