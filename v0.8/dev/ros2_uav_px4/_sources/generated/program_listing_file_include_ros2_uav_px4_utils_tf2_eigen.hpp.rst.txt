
.. _program_listing_file_include_ros2_uav_px4_utils_tf2_eigen.hpp:

Program Listing for File tf2_eigen.hpp
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_utils_tf2_eigen.hpp>` (``include/ros2_uav_px4/utils/tf2_eigen.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 The Technology Innovation Institute (TII)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <Eigen/Geometry>
   #include <tf2/LinearMath/Vector3.h>
   #include <tf2/LinearMath/Quaternion.h>
   
   namespace uav_ros2::utils
   {
   
   tf2::Vector3 eigenNedToTf2Nwu(const Eigen::Vector3f & eigen_vector)
   {
     return tf2::Vector3(eigen_vector.x(), -eigen_vector.y(), -eigen_vector.z());
   }
   
   Eigen::Vector3f tf2FwuToEigenNed(const tf2::Vector3 & tf2_vector)
   {
     return Eigen::Vector3f(tf2_vector.x(), -tf2_vector.y(), -tf2_vector.z());
   }
   
   tf2::Quaternion eigenNedToTf2Nwu(const Eigen::Quaternionf & eigen_quaternion)
   {
     return tf2::Quaternion(
       eigen_quaternion.x(), -eigen_quaternion.y(),
       -eigen_quaternion.z(), eigen_quaternion.w());
   }
   
   Eigen::Quaternionf tf2FwuToEigenNed(const tf2::Quaternion & tf2_quaternion)
   {
     return Eigen::Quaternionf(
       tf2_quaternion.w(), tf2_quaternion.x(),
       -tf2_quaternion.y(), -tf2_quaternion.z());
   }
   
   }  // namespace uav_ros2::utils
