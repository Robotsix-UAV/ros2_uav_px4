
.. _program_listing_file_include_ros2_uav_px4_model_identification_attitude_thrust_matcher.hpp:

Program Listing for File attitude_thrust_matcher.hpp
====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_model_identification_attitude_thrust_matcher.hpp>` (``include/ros2_uav_px4/model_identification/attitude_thrust_matcher.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 The Technology Innovation Institute (TII)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <vector>
   #include <rclcpp/rclcpp.hpp>
   #include <uav_cpp/model_identification/model_matcher.hpp>
   #include <uav_cpp/vehicle_models/quadrotor.hpp>
   #include <uav_cpp/vehicle_models/thrust_scaler.hpp>
   #include <px4_msgs/msg/vehicle_attitude_setpoint.hpp>
   #include <px4_msgs/msg/vehicle_odometry.hpp>
   #include <px4_msgs/msg/vehicle_control_mode.hpp>
   #include "ros2_uav_px4/utils/data_logger.hpp"
   #include "ros2_uav_px4/utils/derivative_filter.hpp"
   
   namespace ros2_uav::identification
   {
   using uav_cpp::identification::ModelMatcher;
   using uav_cpp::models::QuadrotorModel;
   using uav_cpp::models::AttitudeThrustScaler;
   using uav_cpp::pipelines::VelocityQuaternion;
   using px4_msgs::msg::VehicleAttitudeSetpoint;
   using px4_msgs::msg::VehicleOdometry;
   using px4_msgs::msg::VehicleControlMode;
   using std::chrono_literals::operator""ms;
   
   class AttitudeThrustMatcher : public rclcpp::Node, public uav_cpp::parameters::ParamContainer
   {
   public:
     enum class Status
     {
       INIT,
       COLLECTING,
       WAITING_DISARM,
       MATCHING
     };
   
     AttitudeThrustMatcher();
   
     void attitudeSetpointCallback(const VehicleAttitudeSetpoint::SharedPtr attitude_setpoint);
   
     void odometryCallback(const VehicleOdometry::SharedPtr odometry);
   
     void controlModeCallback(const VehicleControlMode::SharedPtr control_mode);
   
   private:
     Status status_ = Status::INIT;   
     std::chrono::milliseconds sampling_time_ = 1ms;   
     uav_ros2::utils::DataLogger data_logger_;   
     double trigger_altitude_ = 2.0;   
     uint8_t trigger_validation_ = 30;   
     uint8_t trigger_counter_ = 0;   
     rclcpp::Subscription<VehicleAttitudeSetpoint>::SharedPtr attitude_setpoint_subscriber_;
     rclcpp::Subscription<VehicleOdometry>::SharedPtr odometry_subscriber_;
     rclcpp::Subscription<VehicleControlMode>::SharedPtr control_mode_subscriber_;
     std::vector<VelocityQuaternion> velocity_data_;   
     uav_ros2::utils::DerivativeFilter3D derivative_filter_;
     uav_cpp::identification::ModelMatcher<QuadrotorModel, AttitudeThrustScaler> model_matcher_;
   };
   }  // namespace ros2_uav::identification
