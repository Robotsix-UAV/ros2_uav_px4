
.. _program_listing_file_include_ros2_uav_px4_mode_interface_mode_interface.hpp:

Program Listing for File mode_interface.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_mode_interface_mode_interface.hpp>` (``include/ros2_uav_px4/mode_interface/mode_interface.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 The Technology Innovation Institute (TII)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <memory>
   #include <vector>
   #include <string>
   #include <uav_cpp/parameters/param_container.hpp>
   #include <px4_ros2/components/mode.hpp>
   #include <uav_cpp/pipeline/control_pipeline.hpp>
   #include "ros2_uav_px4/utils/tf2_eigen.hpp"
   
   namespace ros2_uav::modes
   {
   using uav_cpp::parameters::ParamContainer;
   using uav_cpp::utils::Coordinate;
   using px4_ros2::ModeBase;
   using uav_ros2::utils::eigenNedToTf2Nwu;
   using uav_ros2::utils::tf2FwuToEigenNed;
   using ros2_uav_interfaces::msg::ModeStatus;
   
   template<typename PipelineT>
   concept DerivedFromUavCppPipeline = requires(PipelineT pipeline)
   {
     [] < typename ... T > (uav_cpp::pipelines::ControlPipeline<T...> &) {} (pipeline);
   };
   
   template<DerivedFromUavCppPipeline PipelineT>
   class ModeInterface : public ModeBase, public ParamContainer
   {
   public:
     ModeInterface(const ModeBase::Settings & mode_settings, rclcpp::Node & node)
     : ModeBase(node, mode_settings),
       ParamContainer(),
       node_(node)
     {
       this->createMode();
       this->addChildContainer(this->pipeline_.get());
       vehicle_local_position_ = std::make_shared<px4_ros2::OdometryLocalPosition>(*this);
       vehicle_angular_velocity_ = std::make_shared<px4_ros2::OdometryAngularVelocity>(*this);
       vehicle_attitude_ = std::make_shared<px4_ros2::OdometryAttitude>(*this);
       auto mode_name = mode_settings.name;
       std::replace(mode_name.begin(), mode_name.end(), ' ', '_');
     }
   
     void createMode()
     {
       std::string node_namespace = node_.get_namespace();
       if (node_namespace.empty()) {
         node_namespace = "/";
       }
       // Remove the leading slash
       node_namespace = node_namespace.substr(1);
       pipeline_ = std::make_shared<PipelineT>(node_namespace);
     }
   
     void setSetpoint(const PipelineT::PipelineInputType & setpoint) {pipeline_->setInput(setpoint);}
   
     void setTfBuffer(std::shared_ptr<tf2_ros::Buffer> tf_buffer) {pipeline_->setTfBuffer(tf_buffer);}
   
     bool isIdle() const {return pipeline_->isIdle();}
   
   protected:
     void onActivate() override
     {
       odometryUpdate();
       this->pipeline_->reset();
     }
   
     void onDeactivate() override {}
   
     void odometryUpdate()
     {
       uav_cpp::types::Odometry odometry;
       auto position = vehicle_local_position_->positionNed();
       auto velocity = vehicle_local_position_->velocityNed();
       auto attitude = vehicle_attitude_->attitude();
       auto angular_velocity = vehicle_angular_velocity_->angularVelocityFrd();
       odometry.position = eigenNedToTf2Nwu(position);
       odometry.velocity = eigenNedToTf2Nwu(velocity);
       odometry.orientation = eigenNedToTf2Nwu(attitude);
       odometry.angular_velocity = eigenNedToTf2Nwu(angular_velocity);
       if (!pipeline_) {
         RCLCPP_ERROR(node_.get_logger(), "ControlPipeline not initialized");
         return;
       }
       this->pipeline_->setCurrentOdometry(odometry);
     }
   
     rclcpp::Node & node_;  
     std::shared_ptr<PipelineT> pipeline_;  
   
     rclcpp::TimerBase::SharedPtr mode_status_timer_;  
   
     std::shared_ptr<px4_ros2::OdometryLocalPosition> vehicle_local_position_;
     std::shared_ptr<px4_ros2::OdometryAngularVelocity> vehicle_angular_velocity_;
     std::shared_ptr<px4_ros2::OdometryAttitude> vehicle_attitude_;
   };
   
   }  // namespace ros2_uav::modes
