
.. _program_listing_file_include_ros2_uav_px4_utils_frame_conversions.hpp:

Program Listing for File frame_conversions.hpp
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_ros2_uav_px4_utils_frame_conversions.hpp>` (``include/ros2_uav_px4/utils/frame_conversions.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   // Copyright 2024 The Technology Innovation Institute (TII)
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //     http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   
   #pragma once
   
   #include <eigen3/Eigen/Dense>
   #include <eigen3/Eigen/Geometry>
   
   namespace uav_ros2::utils
   {
   Eigen::Vector3d NedToNwu(const Eigen::Vector3d & ned)
   {
     return Eigen::Vector3d(ned.x(), -ned.y(), -ned.z());
   }
   
   Eigen::Vector3d NwuToNed(const Eigen::Vector3d & nwu)
   {
     return Eigen::Vector3d(nwu.x(), -nwu.y(), -nwu.z());
   }
   
   Eigen::Quaterniond NedToNwu(const Eigen::Quaterniond & ned)
   {
     return Eigen::Quaterniond(ned.w(), ned.x(), -ned.y(), -ned.z());
   }
   
   Eigen::Quaterniond NwuToNed(const Eigen::Quaterniond & nwu)
   {
     return Eigen::Quaterniond(nwu.w(), nwu.x(), -nwu.y(), -nwu.z());
   }
   
   }  // namespace uav_ros2::utils
