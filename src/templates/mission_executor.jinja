#include <rclcpp/rclcpp.hpp>
#include "ros2_uav_px4/srv/mode_selector.hpp"
#include "ros2_uav_interfaces/msg/mode_status.hpp"
{% set types_header = [] %}
{% for step in steps %}
{% if step.input.type not in types_header %}
#include <ros2_uav_interfaces/msg/{{ step.input.type|camel_to_snake }}.hpp>
{% set types_header = types_header.append(step.input.type) %}
{% endif %}
{% endfor %}

using namespace std::chrono_literals;
using namespace ros2_uav_interfaces::msg;

class MissionExecutor : public rclcpp::Node {
public:
    MissionExecutor() : Node("mission_executor") {
        set_mode_client_ = this->create_client<ros2_uav_px4::srv::ModeSelector>("set_mode");
        {% set publishers = [] %}
        {% for step in steps %}
        {% if step.input.topic not in publishers %}
        {{ step.input.topic|replace_slash }}_publisher_ = this->create_publisher<{{ step.input.type }}>("{{ step.input.topic }}", 10);
        {% set publishers = publishers.append(step.input.topic) %}
        {% endif %}
        {% endfor %}
        {% set modes = [] %}
        {% for step in steps %}
        {% if step.mode not in modes %}
        {{ step.mode }}_subscription_ = this->create_subscription<ModeStatus>("modes_status/{{ step.mode|lower }}", 10,
            [this](const ModeStatus::SharedPtr msg) {
                if (msg->status == ModeStatus ::IDLE)
                    completed_ = true;
            });
        {% set modes = modes.append(step.mode) %}
        {% endif %}
        {% endfor %}
        std::string node_namespace = this->get_namespace();
        if (node_namespace == "/") {
            uav_name_ = "uav";
        } else {
            uav_name_ = node_namespace.substr(1);
        }
    }

    void execute_mission() {
        {% for step in steps %}
        // Set mode for step {{ loop.index }}
        auto request{{ loop.index }} = std::make_shared<ros2_uav_px4::srv::ModeSelector::Request>();
        request{{ loop.index }}->mode = ros2_uav_px4::srv::ModeSelector::Request::{{ step.mode.upper() }};
        while (!set_mode_client_->wait_for_service(1s)) {
            if (!rclcpp::ok()) {
                RCLCPP_ERROR(this->get_logger(), "Interrupted while waiting for the service. Exiting.");
                return;
            }
            RCLCPP_INFO(this->get_logger(), "waiting for service to appear...");
        }
        auto result{{ loop.index }} = set_mode_client_->async_send_request(request{{ loop.index }});
        // wait for the server to act on the request
        if (rclcpp::spin_until_future_complete(shared_from_this(), result{{ loop.index }}.future) ==
            rclcpp::FutureReturnCode::SUCCESS) {
            RCLCPP_INFO(this->get_logger(), "Mode set to {{ step.mode }}");
        } else {
            RCLCPP_ERROR(this->get_logger(), "Failed to call service set_mode");
        }

        // Wait for mode to be ready
        sleep(0.5);
        completed_ = false;
        while (!completed_) {
            rclcpp::spin_some(shared_from_this());
        }

        // Send setpoint
        auto msg{{ loop.index }} = {{ step.input.type }}();
        msg{{ loop.index }}.header.stamp = this->get_clock()->now();
        msg{{ loop.index }}.header.frame_id = uav_name_ + "/{{ step.input.frame }}";
        {% set main_loop = loop %}
        {% for key, value in step.input.items() %}
        {% if key != "type" and key != "frame" and key != "topic" %}
        {% if value is mapping %}
        {% for sub_key, sub_value in value.items() %}
        msg{{ main_loop.index }}.{{ key }}.{{ sub_key }} = {{ sub_value }};
        {% endfor %}
        {% else %}
        msg{{ main_loop.index }}.{{ key }} = {{ value }};
        {% endif %}
        {% endif %}
        {% endfor %}

        {{ step.input.topic|replace_slash }}_publisher_->publish(msg{{ loop.index }});
        sleep(0.5);
        completed_ = false;

        // Loop the node until the step is completed
        while (!completed_) {
            rclcpp::spin_some(shared_from_this());
        }
        {% endfor %}
    }

private:
    std::string uav_name_;
    rclcpp::Client<ros2_uav_px4::srv::ModeSelector>::SharedPtr set_mode_client_;
    {% set publishers = [] %}
    {% for step in steps %}
    {% if step.input.topic not in publishers %}
    rclcpp::Publisher<{{ step.input.type }}>::SharedPtr {{ step.input.topic|replace_slash }}_publisher_;
    {% set publishers = publishers.append(step.input.topic) %}
    {% endif %}
    {% endfor %}
    {% set modes = [] %}
    {% for step in steps %}
    {% if step.mode not in modes %}
    rclcpp::Subscription<ModeStatus>::SharedPtr {{ step.mode }}_subscription_;
    {% set modes = modes.append(step.mode) %}
    {% endif %}
    {% endfor %}
    bool completed_ = false;
};

int main(int argc, char * argv[]) {
    rclcpp::init(argc, argv);
    auto executor = std::make_shared<MissionExecutor>();
    executor->execute_mission();
    rclcpp::shutdown();
    return 0;
}
