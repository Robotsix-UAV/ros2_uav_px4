<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="attitude__thrust__impl_8hpp" kind="file" language="C++">
    <compoundname>attitude_thrust_impl.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes refid="tf2__eigen_8hpp" local="yes">ros2_uav_px4/utils/tf2_eigen.hpp</includes>
    <includedby refid="attitude__thrust_8hpp" local="yes">include/ros2_uav_px4/modes/attitude_thrust.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/ros2_uav_px4/modes/attitude_thrust_impl.hpp</label>
        <link refid="attitude__thrust__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ros2_uav_px4/utils/tf2_eigen.hpp</label>
        <link refid="tf2__eigen_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Eigen/Geometry</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="6">
        <label>tf2/LinearMath/Quaternion.h</label>
      </node>
      <node id="5">
        <label>tf2/LinearMath/Vector3.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/ros2_uav_px4/modes/attitude_thrust.hpp</label>
        <link refid="attitude__thrust_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/ros2_uav_px4/modes/attitude_thrust_impl.hpp</label>
        <link refid="attitude__thrust__impl_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/ros2_uav_px4/modes/position.hpp</label>
        <link refid="position_8hpp_source"/>
      </node>
      <node id="4">
        <label>include/ros2_uav_px4/modes/spin.hpp</label>
        <link refid="spin_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceros2__uav">ros2_uav</innernamespace>
    <innernamespace refid="namespaceros2__uav_1_1modes">ros2_uav::modes</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2024<sp/>Damien<sp/>SIX<sp/>(damien@robotsix.net)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ros2_uav_px4/utils/tf2_eigen.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ros2_uav::modes</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uav_ros2::utils::eigenNedToTf2Nwu;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">uav_ros2::utils::tf2FwuToEigenNed;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ModeT&gt;</highlight></codeline>
<codeline lineno="26" refid="classros2__uav_1_1modes_1_1AttitudeThrustMode_1aed228c48e33e8302942ea1dbfd1115a7" refkind="member"><highlight class="normal"><ref refid="classros2__uav_1_1modes_1_1AttitudeThrustMode_1aed228c48e33e8302942ea1dbfd1115a7" kindref="member">AttitudeThrustMode&lt;ModeT&gt;::AttitudeThrustMode</ref>(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ModeBase::Settings<sp/>&amp;<sp/>mode_settings,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>rclcpp::Node<sp/>&amp;<sp/>node)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">:<sp/><ref refid="classros2__uav_1_1modes_1_1ModeInterface" kindref="compound">ModeInterface</ref>&lt;ModeT&gt;(mode_settings,<sp/>node)</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>this-&gt;setSetpointUpdateRate(250.0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>attitude_setpoint_<sp/>=<sp/>std::make_shared&lt;px4_ros2::AttitudeSetpointType&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>this-&gt;addRequiredParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_constant_coefficient&quot;</highlight><highlight class="normal">,<sp/>std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(0.0)));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>this-&gt;addRequiredParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_linear_coefficient&quot;</highlight><highlight class="normal">,<sp/>std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(0.0)));</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>this-&gt;addRequiredParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_quadratic_coefficient&quot;</highlight><highlight class="normal">,<sp/>std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(0.0)));</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>time_init_<sp/>=<sp/>this-&gt;<ref refid="classros2__uav_1_1modes_1_1ModeInterface_1ad19c470e704727df1959a77cd0a12478" kindref="member">node_</ref>.now();</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ModeT&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classros2__uav_1_1modes_1_1AttitudeThrustMode" kindref="compound">AttitudeThrustMode&lt;ModeT&gt;::updateSetpoint</ref>([[maybe_unused]]<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>this-&gt;odometryUpdate();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed_time<sp/>=<sp/>(this-&gt;node_.now()<sp/>-<sp/>time_init_).seconds();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>this-&gt;mode_-&gt;execute(elapsed_time);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>control_inputs<sp/>=<sp/>this-&gt;mode_-&gt;getFcuInputs();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>attitude<sp/>setpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion<sp/>of<sp/>the<sp/>thrust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thrust_constant_coefficient,<sp/>thrust_linear_coefficient,<sp/>thrust_quadratic_coefficient;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>this-&gt;getParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_constant_coefficient&quot;</highlight><highlight class="normal">,<sp/>thrust_constant_coefficient);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>this-&gt;getParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_linear_coefficient&quot;</highlight><highlight class="normal">,<sp/>thrust_linear_coefficient);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>this-&gt;getParameter(</highlight><highlight class="stringliteral">&quot;px4.thrust_quadratic_coefficient&quot;</highlight><highlight class="normal">,<sp/>thrust_quadratic_coefficient);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thrust<sp/>=<sp/>control_inputs.thrust;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>normalized_thrust<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>normalized<sp/>with<sp/>thrust<sp/>=<sp/>c<sp/>+<sp/>l<sp/>*<sp/>t_n<sp/>+<sp/>q<sp/>*<sp/>t_n^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classros2__uav_1_1modes_1_1AttitudeThrustMode_1aed228c48e33e8302942ea1dbfd1115a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>discriminant<sp/>=<sp/>thrust_linear_coefficient<sp/>*<sp/>thrust_linear_coefficient<sp/>-</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>4<sp/>*<sp/>thrust_quadratic_coefficient<sp/>*<sp/>(thrust_constant_coefficient<sp/>-<sp/>thrust);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discriminant<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_WARN(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;node_.get_logger(),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[Attitude<sp/>Thrust<sp/>Mode]<sp/>Negative<sp/>discriminant<sp/>in<sp/>thrust<sp/>conversion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>normalized_thrust<sp/>=<sp/>(-thrust_linear_coefficient<sp/>+<sp/>std::sqrt(discriminant))<sp/>/</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(2<sp/>*<sp/>thrust_quadratic_coefficient);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Vector3f<sp/>thrust_sp{0.0f,<sp/>0.0f,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-normalized_thrust)};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::Quaternionf<sp/>attitude_sp<sp/>=<sp/>tf2FwuToEigenNed(control_inputs.orientation);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>attitude_setpoint_-&gt;update(attitude_sp,<sp/>thrust_sp);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ros2_uav::modes</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/ros2_uav_px4/modes/attitude_thrust_impl.hpp"/>
  </compounddef>
</doxygen>
